#!/bin/sh

[ -f $HOME/.config/galley/etc/$1 ] || \
    { echo "missing ~/.config/galley/etc/$1--copy 'example'?"; exit 1; }
. $HOME/.config/galley/etc/$1

# We ignore the output of the create command because it sometimes returns
# the previous IP address of $host.
#
# We sleep because the new host isn't ready right away to accept ssh
# connections and so we don't conflict with the host running apt on itself
# at startup.
#
# We sleep before getting the IP address as it doesn't slow things down
# and gives Digital Ocean a little more time to ascertain the correct IP
# address.
echo "# Creating droplet $image $size $host"
doctl compute droplet create --region $region --image $image \
    --size $size --ssh-keys $key --wait $host > /dev/null

echo "# Waiting $sleep seconds for droplet to be ready..."
sleep $sleep

printf '%s' "# Finding IP address"
ip=`doctl compute droplet list | grep $host | awk '{ print $3 }'`
echo ": $ip"

# Connect quietly and skip strict key because IP address reuse
ssh="ssh -q -o StrictHostKeyChecking=no root@$ip"

echo "# Suppressing login messages and creating build directory"
$ssh "touch .hushlogin; mkdir -p $dir"

echo "# Installing packages -- see $dir/apt.log"
$ssh "export DEBIAN_FRONTEND=noninteractive; apt-get -qqy update; apt-get -qy install $pkg > $dir/apt.log 2>&1"

echo "# Cloning Seastar -- see $dir/git.log"
$ssh "cd $dir; git clone -b $branch --recurse-submodules $repo > $dir/git.log 2>&1"

echo "# Starting build in tmux session -- see $dir/build.log"
echo "# or use 'tmux attach' to connect to build session"
$ssh tmux new -d -s Galley
$ssh tmux send-keys -t Galley.0 "cd\ $dir/seastar\;\ ./cooking.sh\ \|\ tee\ $dir/build.log" ENTER

# Provide the ssh command as our uncommented output
echo $ssh
